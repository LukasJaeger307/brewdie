#!/usr/bin/python3

# Copyright 2019, Lukas JÃ¤ger 
#
# This file is part of Brewdie.
#
# Brewdie is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Brewdie is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Brewdie.  If not, see <http://www.gnu.org/licenses/>. 

import datetime
import argparse

from recipe import *
from brew import *
from brewdiedb import *
from recipe_maker import *

VERSION = "0.1"

# Create a database connector
db = BrewdieDB()

# Parse the command line arguments
parser = argparse.ArgumentParser()
parser.add_argument("command", help="A command for the brewdie recipe"
        " application")
parser.add_argument("--name")
parser.add_argument("--style")
parser.add_argument("--litres", type=float)
args = parser.parse_args()

if args.litres:
    print(args.litres)

# Checking which command was entered
if args.command == "new":
    # Create a new recipe and store it in the database
    recipe_maker = RecipeMaker()
    recipe = recipe_maker.create_recipe()
    if recipe:
        db.store_recipe(recipe)
    else:
        print("Aborting recipe creation")

elif args.command == "search":
    # Search for a recipe by name or style and print their
    # names and styles
    if not args.name and not args.style:
        print("No name or style was given for search")
    else:
        search_results = {}
        if args.name:
            name_search = db.load_recipes_by_name(args.name)
            if name_search:
                for recipe in name_search:
                    search_results[recipe.name] = recipe.style
        if args.style:
            style_search = db.load_recipes_by_style(args.style)
            if style_search:
                for recipe in style_search:
                    search_results[recipe.name] = recipe.style
        for name, style in search_results.items():
            print(name, ":", style)

elif args.command == "list":
    # List all recipes with names or styles matching the given params
    if not args.name and not args.style:
        print("No name or style was given for search")
    else:
        found_recipes = []

        # Search by name
        if args.name:
            name_search = db.load_recipes_by_name(args.name)
            if name_search:
                for recipe in name_search:
                    if not recipe in found_recipes:
                        found_recipes.append(recipe)

        # Search by style
        if args.style:
            style_search = db.load_recipes_by_style(args.style)
            if style_search:
                for recipe in style_search:
                    if not recipe in found_recipes:
                        found_recipes.append(recipe)

        # Printing the results
        for recipe in found_recipes:
            if args.litres:
                recipe = recipe.scale_to_litres(args.litres)
            recipe.print()

elif args.command == "load":
    # Load a recipe by its exact name
    if not args.name:
        print("No name was specified")
    else:
        recipe = db.load_recipe(args.name)
        if recipe:
            if args.litres:
                recipe = recipe.scale_to_litres(args.litres)
            recipe.print()

